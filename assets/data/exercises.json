{
    "cap1": {
        "title": "La Nascita dell'Idea",
        "exercises": [
            {
                "id": "cap1_ex1",
                "title": "Fibonacci Base",
                "difficulty": 1,
                "statement": "Implementa la funzione fibonacci(n) che ritorna l'n-esimo numero di Fibonacci usando la ricorsione semplice.",
                "template": "def fibonacci(n):\n    # Il tuo codice qui\n    # F(0) = 0, F(1) = 1\n    # F(n) = F(n-1) + F(n-2)\n    pass",
                "solution": "def fibonacci(n):\n    if n <= 1:\n        return n\n    return fibonacci(n-1) + fibonacci(n-2)",
                "tests": [
                    {"input": "0", "expected": "0"},
                    {"input": "1", "expected": "1"},
                    {"input": "5", "expected": "5"},
                    {"input": "10", "expected": "55"}
                ],
                "hint": "Ricorda i casi base: F(0) = 0 e F(1) = 1"
            },
            {
                "id": "cap2_ex2",
                "title": "Fibonacci con Memoization",
                "difficulty": 2,
                "statement": "Ottimizza la funzione fibonacci usando la memoization per evitare calcoli ripetuti.",
                "template": "def fibonacci_memo(n, memo=None):\n    if memo is None:\n        memo = {}\n    \n    # Il tuo codice qui\n    # Usa memo per salvare risultati già calcolati\n    pass",
                "solution": "def fibonacci_memo(n, memo=None):\n    if memo is None:\n        memo = {}\n    \n    if n in memo:\n        return memo[n]\n    \n    if n <= 1:\n        return n\n    \n    memo[n] = fibonacci_memo(n-1, memo) + fibonacci_memo(n-2, memo)\n    return memo[n]",
                "tests": [
                    {"input": "0", "expected": "0"},
                    {"input": "1", "expected": "1"},
                    {"input": "20", "expected": "6765"},
                    {"input": "35", "expected": "9227465"}
                ],
                "hint": "Prima di calcolare, controlla se il valore è già in memo"
            },
            {
                "id": "cap1_ex3",
                "title": "Confronto Performance",
                "difficulty": 3,
                "statement": "Implementa una funzione che confronta i tempi di esecuzione tra fibonacci ricorsivo e con memoization.",
                "template": "import time\n\ndef compare_fibonacci(n):\n    # Implementa fibonacci ricorsivo\n    def fib_recursive(n):\n        pass\n    \n    # Implementa fibonacci con memo\n    def fib_memo(n, memo=None):\n        pass\n    \n    # Misura i tempi e ritorna un dizionario\n    # {'recursive_time': ..., 'memo_time': ..., 'speedup': ...}\n    pass",
                "solution": "import time\n\ndef compare_fibonacci(n):\n    def fib_recursive(n):\n        if n <= 1:\n            return n\n        return fib_recursive(n-1) + fib_recursive(n-2)\n    \n    def fib_memo(n, memo=None):\n        if memo is None:\n            memo = {}\n        if n in memo:\n            return memo[n]\n        if n <= 1:\n            return n\n        memo[n] = fib_memo(n-1, memo) + fib_memo(n-2, memo)\n        return memo[n]\n    \n    start = time.time()\n    fib_recursive(n)\n    recursive_time = time.time() - start\n    \n    start = time.time()\n    fib_memo(n)\n    memo_time = time.time() - start\n    \n    return {\n        'recursive_time': round(recursive_time, 4),\n        'memo_time': round(memo_time, 6),\n        'speedup': round(recursive_time / memo_time, 1)\n    }",
                "tests": [
                    {"input": "20", "expected": "{'recursive_time': ..., 'memo_time': ..., 'speedup': ...}", "check_type": "performance"}
                ],
                "hint": "Usa time.time() per misurare il tempo di esecuzione"
            }
        ]
    },
    "cap2": {
        "title": "L'Anatomia della DP",
        "exercises": [
            {
                "id": "cap2_ex1",
                "title": "Identificare Stati",
                "difficulty": 1,
                "statement": "Data una griglia m×n, calcola il numero di percorsi unici dall'angolo in alto a sinistra a quello in basso a destra (puoi muoverti solo giù o destra).",
                "template": "def unique_paths(m, n):\n    # dp[i][j] = numero di percorsi per arrivare a (i,j)\n    # Il tuo codice qui\n    pass",
                "solution": "def unique_paths(m, n):\n    dp = [[1] * n for _ in range(m)]\n    \n    for i in range(1, m):\n        for j in range(1, n):\n            dp[i][j] = dp[i-1][j] + dp[i][j-1]\n    \n    return dp[m-1][n-1]",
                "tests": [
                    {"input": "3, 2", "expected": "3"},
                    {"input": "3, 7", "expected": "28"},
                    {"input": "7, 3", "expected": "28"}
                ],
                "hint": "Per ogni cella, i percorsi sono la somma dei percorsi dalla cella sopra e da sinistra"
            },
            {
                "id": "cap2_ex2",
                "title": "Transizioni di Stato",
                "difficulty": 2,
                "statement": "Trova la sottosequenza crescente più lunga (LIS) in un array.",
                "template": "def longest_increasing_subsequence(nums):\n    # dp[i] = lunghezza della LIS che termina in nums[i]\n    # Il tuo codice qui\n    pass",
                "solution": "def longest_increasing_subsequence(nums):\n    if not nums:\n        return 0\n    \n    n = len(nums)\n    dp = [1] * n\n    \n    for i in range(1, n):\n        for j in range(i):\n            if nums[j] < nums[i]:\n                dp[i] = max(dp[i], dp[j] + 1)\n    \n    return max(dp)",
                "tests": [
                    {"input": "[10, 9, 2, 5, 3, 7, 101, 18]", "expected": "4"},
                    {"input": "[0, 1, 0, 3, 2, 3]", "expected": "4"},
                    {"input": "[7, 7, 7, 7, 7]", "expected": "1"}
                ],
                "hint": "Per ogni elemento, cerca tutti gli elementi precedenti minori"
            },
            {
                "id": "cap2_ex3",
                "title": "Stati Complessi",
                "difficulty": 3,
                "statement": "Il problema dello zaino 0-1: dati pesi e valori di n oggetti, trova il valore massimo che può stare in uno zaino di capacità W.",
                "template": "def knapsack(weights, values, W):\n    # dp[i][w] = valore massimo usando i primi i oggetti con capacità w\n    # Il tuo codice qui\n    pass",
                "solution": "def knapsack(weights, values, W):\n    n = len(weights)\n    dp = [[0] * (W + 1) for _ in range(n + 1)]\n    \n    for i in range(1, n + 1):\n        for w in range(W + 1):\n            # Non prendo l'oggetto i-1\n            dp[i][w] = dp[i-1][w]\n            \n            # Prendo l'oggetto i-1 se possibile\n            if weights[i-1] <= w:\n                dp[i][w] = max(dp[i][w], dp[i-1][w-weights[i-1]] + values[i-1])\n    \n    return dp[n][W]",
                "tests": [
                    {"input": "[1, 3, 4, 5], [1, 4, 5, 7], 7", "expected": "9"},
                    {"input": "[2, 1, 3, 2], [12, 10, 20, 15], 5", "expected": "37"}
                ],
                "hint": "Per ogni oggetto hai due scelte: prenderlo o non prenderlo"
            }
        ]
    },
    "cap3": {
        "title": "Il Metodo SPAZIO",
        "exercises": [
            {
                "id": "cap3_ex1",
                "title": "S - Stati Base",
                "difficulty": 1,
                "statement": "Calcola il numero minimo di monete necessarie per ottenere un importo target, date monete di tagli specifici.",
                "template": "def coin_change(coins, amount):\n    # dp[i] = numero minimo di monete per fare importo i\n    # Il tuo codice qui\n    pass",
                "solution": "def coin_change(coins, amount):\n    dp = [float('inf')] * (amount + 1)\n    dp[0] = 0\n    \n    for i in range(1, amount + 1):\n        for coin in coins:\n            if coin <= i:\n                dp[i] = min(dp[i], dp[i - coin] + 1)\n    \n    return dp[amount] if dp[amount] != float('inf') else -1",
                "tests": [
                    {"input": "[1, 2, 5], 11", "expected": "3"},
                    {"input": "[2], 3", "expected": "-1"},
                    {"input": "[1], 0", "expected": "0"}
                ],
                "hint": "Per ogni importo, prova tutte le monete possibili"
            },
            {
                "id": "cap3_ex2",
                "title": "P - Problemi e A - Azioni",
                "difficulty": 2,
                "statement": "Il problema del taglio della corda: data una corda di lunghezza n e i prezzi per ogni lunghezza, trova il profitto massimo.",
                "template": "def rod_cutting(prices, n):\n    # prices[i] = prezzo per lunghezza i+1\n    # dp[i] = profitto massimo per corda di lunghezza i\n    # Il tuo codice qui\n    pass",
                "solution": "def rod_cutting(prices, n):\n    dp = [0] * (n + 1)\n    \n    for i in range(1, n + 1):\n        for j in range(i):\n            dp[i] = max(dp[i], prices[j] + dp[i - j - 1])\n    \n    return dp[n]",
                "tests": [
                    {"input": "[1, 5, 8, 9, 10, 17, 17, 20], 8", "expected": "22"},
                    {"input": "[3, 5, 8, 9, 10, 17, 17, 20], 8", "expected": "24"}
                ],
                "hint": "Per ogni lunghezza, prova tutti i tagli possibili"
            },
            {
                "id": "cap3_ex3",
                "title": "SPAZIO Completo",
                "difficulty": 3,
                "statement": "Edit distance: trova il numero minimo di operazioni (inserisci, cancella, sostituisci) per trasformare una stringa in un'altra.",
                "template": "def edit_distance(word1, word2):\n    # dp[i][j] = edit distance tra word1[:i] e word2[:j]\n    # Il tuo codice qui\n    pass",
                "solution": "def edit_distance(word1, word2):\n    m, n = len(word1), len(word2)\n    dp = [[0] * (n + 1) for _ in range(m + 1)]\n    \n    # Casi base\n    for i in range(m + 1):\n        dp[i][0] = i\n    for j in range(n + 1):\n        dp[0][j] = j\n    \n    # Riempi la tabella\n    for i in range(1, m + 1):\n        for j in range(1, n + 1):\n            if word1[i-1] == word2[j-1]:\n                dp[i][j] = dp[i-1][j-1]\n            else:\n                dp[i][j] = 1 + min(\n                    dp[i-1][j],    # cancella\n                    dp[i][j-1],    # inserisci\n                    dp[i-1][j-1]   # sostituisci\n                )\n    \n    return dp[m][n]",
                "tests": [
                    {"input": "\"horse\", \"ros\"", "expected": "3"},
                    {"input": "\"intention\", \"execution\"", "expected": "5"}
                ],
                "hint": "Considera le tre operazioni possibili per ogni coppia di caratteri"
            }
        ]
    }
}